<?php
/*
class ZenValidator extends Validator{
	
	/**
	 * The FieldList being validated
	 * @var FieldList
	 **/
	protected $fields;


	/**
	 * trigger, value, validation-minlength, error-message, error-container
	 *
	 * @var array
	 **/
	protected $fieldSettings = array();


	/**
	 * all field settings will default to these, if set
	 * @var array
	 **/
	protected $defaultSettings = array();


	/**
	 * field validators assigned to this validator
	 * @var array
	 **/
	protected $fieldConstraints = array();


	/**
	 * @var Boolean
	 **/
	protected $parsley = true;


	/**
	 * The FieldList being validated
	 * @var FieldList
	 **/
	function __construct(FieldList $fields){
		$this->fields = $fields;
	}


	/**
	 * @param Form $form
	 */
	public function setForm($form) {
		$this->form = $form;
		
		if($this->parsley) $this->applyParsley();

		return $this;
	}

	/**
	 * addConstraint - adds a ZenValidatorType to this validator
	 * @param String $field - name of the field to be validated
	 * @param ZenFieldValidator $constraint 
	 * @return $this
	 **/
	public function addConstraint($fieldName, $constraint){
		$constraint
			->setField($this->fields->fieldByName($fieldName))
			->setValidator($this);

		$this->fieldConstraints[$fieldName][$constraint->class] = $constraint;
		return $this;
	}	


	/**
	 * remove a validator type from a field
	 * @param String $field - name of the field to have a validationType removed from
	 * @param String $validatorType - name of the type to remove
	 * @return $this
	 **/
	function removeConstraint($fieldName, $constraint){
		unset($this->fieldConstraints[$fieldName][$constraint]);
		return $this;
	}


	/**
	 * try to find a configured setting in fieldSettings
	 * otherwise fallback to defaultFieldSettings
	 * @param string $field
	 * @param string $setting
	 * @return string $val
	 **/
	function getFieldSetting($field, $setting){
		if(isset($this->fieldSettings[$field])){
			if(isset($this->fieldSettings[$field][$setting])){
				return $this->fieldSettings[$field][$setting];
			}	
		}

		if(isset($this->defaultFieldSettings[$setting])){
			return $this->defaultFieldSettings[$setting];
		}
	}


	function addDefaultSetting($setting, $value){
		$this->defaultSettings[$setting] = $value;
		return $this;
	}


	function addFieldSetting($field, $setting, $value){
		$this->fieldSettings[$field][$setting] = $value;
		return $this;
	}


	/**
	 * Apply Parsley
	 * @return void
	 **/
	public function ApplyParsley(){
		Requirements::javascript(THIRDPARTY_DIR . '/jquery/jquery.js');
		Requirements::javascript(ZENVALIDATOR_PATH . '/javascript/parsley/parsley.min.js');

		$this->form->setAttribute('data-validate', "parsley");

		// apply default configs
		// foreach ($fields as $field) {
		// 	foreach ($defaultSettings as $setting) {
				
		// 	}
		// }


		// apply messages
		
		// ...

		// apply triggers

		foreach ($this->fields as $field) {
			# code...
		}

		// apply focus

		// ..
		
		// ...

		// apply constraints
		
		foreach ($this->fieldConstraints as $constraint) {
			//$constraint->setHTMLAttributes();
		}

		// if($this->focus){
		// 	$this->form->setAttribute('data-focus', $this->focus);
		// }
	}


    /**
	 * Enable or disable client side validation
	 * @param Boolean $bool
	 */
	public function enableParsley($bool) {
		$this->parsley = $bool;
		return $this;
	}


		/**
	 * Performs the php validation on all validators attached to this validator
	 * @return $this
	 **/
	public function php($data){
		$fields = $this->form->fields->dataFields();

		foreach ($this->validators as $fieldName => $validators) {
			foreach ($validators as $validator) {

				if(!$validator->validate($data[$fieldName])){
					$this->validationError($fieldName, $validator->getMessage(), 'required');
				}
			}
		}
	}


	public function removeValidation(){

	}
}
